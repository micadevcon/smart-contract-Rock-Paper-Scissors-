// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract RockPaperScissors {
    // события
    event GameCreated(address indexed creator, address indexed opponent, uint256 wager);
    event CommitMade(address indexed player, uint256 gameId, bytes32 commitment);
    event RevealMade(address indexed player, uint256 gameId, Move move);
    event GameResult(address indexed winner, address indexed loser, string result);

    // Перечисление возможных ходов
    enum Move { None, Rock, Paper, Scissors }

    struct Game {
        address player1;
        address player2;
        uint256 wager;
        bytes32 player1Commit; // Хеш от хода и случайного значения
        bytes32 player2Commit;
        Move player1Move; // Раскрытый ход
        Move player2Move;
        bool isActive;
    }

    mapping(uint256 => Game) public games;
    uint256 public gameCount;

    // Модификатор для проверки, что игрок является участником игры
    modifier onlyParticipant(uint256 gameId) {
        require(msg.sender == games[gameId].player1 || msg.sender == games[gameId].player2, "You are not a participant.");
        _;
    }

    // для проверки фазы commit
    modifier commitPhase(uint256 gameId) {
        require(games[gameId].player1Commit == 0 || games[gameId].player2Commit == 0, "Both players have committed.");
        _;
    }

    // для проверки фазы reveal
    modifier revealPhase(uint256 gameId) {
        require(games[gameId].player1Commit != 0 && games[gameId].player2Commit != 0, "Commit phase not completed.");
        _;
    }

    // Создание игры
    function createGame(address opponent) external payable {
        require(msg.value > 0, "Wager must be greater than 0.");

        gameCount++;
        games[gameCount] = Game({
            player1: msg.sender,
            player2: opponent,
            wager: msg.value,
            player1Commit: 0,
            player2Commit: 0,
            player1Move: Move.None,
            player2Move: Move.None,
            isActive: true
        });

        emit GameCreated(msg.sender, opponent, msg.value);
    }

    // Commit ход
    function commitMove(uint256 gameId, bytes32 commitment) external onlyParticipant(gameId) commitPhase(gameId) {
        Game storage game = games[gameId];

        if (msg.sender == game.player1) {
            require(game.player1Commit == 0, "Move already committed.");
            game.player1Commit = commitment;
        } else {
            require(game.player2Commit == 0, "Move already committed.");
            game.player2Commit = commitment;
        }

        emit CommitMade(msg.sender, gameId, commitment);
    }

    // Reveal ход
    function revealMove(uint256 gameId, Move move, string memory salt) external onlyParticipant(gameId) revealPhase(gameId) {
        require(move == Move.Rock || move == Move.Paper || move == Move.Scissors, "Invalid move.");
        Game storage game = games[gameId];

        bytes32 commitment = keccak256(abi.encodePacked(move, salt));
        if (msg.sender == game.player1) {
            require(commitment == game.player1Commit, "Commitment does not match.");
            game.player1Move = move;
        } else {
            require(commitment == game.player2Commit, "Commitment does not match.");
            game.player2Move = move;
        }

        emit RevealMade(msg.sender, gameId, move);

        // Если оба игрока раскрыли ходы, определяем результат
        if (game.player1Move != Move.None && game.player2Move != Move.None) {
            determineWinner(gameId);
        }
    }

    // Определение победителя
    function determineWinner(uint256 gameId) internal {
        Game storage game = games[gameId];
        require(game.isActive, "Game is not active.");

        string memory result;
        address winner;
        address loser;

        if (game.player1Move == game.player2Move) {
            result = "Draw";
            payable(game.player1).transfer(game.wager / 2);
            payable(game.player2).transfer(game.wager / 2);
        } else if (
            (game.player1Move == Move.Rock && game.player2Move == Move.Scissors) ||
            (game.player1Move == Move.Paper && game.player2Move == Move.Rock) ||
            (game.player1Move == Move.Scissors && game.player2Move == Move.Paper)
        ) {
            result = "Player 1 Wins";
            winner = game.player1;
            loser = game.player2;
            payable(game.player1).transfer(game.wager);
        } else {
            result = "Player 2 Wins";
            winner = game.player2;
            loser = game.player1;
            payable(game.player2).transfer(game.wager);
        }

        game.isActive = false;
        emit GameResult(winner, loser, result);
    }
}
